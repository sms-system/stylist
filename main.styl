@import 'vars.styl'
@import 'func.styl'
@import 'helpers.styl'
@import 'initial.styl'

// Get full path for asset file
asset(path)
  ASSETS_PATH + path

// @extends placeholder selectors
implements()
  arguments = unquote($ + join(' $', arguments))
  @extends {arguments}

// Allows skip some parameters with _ sign
margin()
  _fill margin arguments
padding()
  _fill padding arguments
  
position(type, top=_, left=_, right=_, bottom=_)
  position type
  top top if top!=_
  left left if left!=_
  right right if right!=_
  bottom bottom if bottom!=_

xy(type, x, y)
  {type} y _ _ x

scale()
  transform unquote('scale' + arguments)

font()
  font-family arguments

import-font(name, fontName=, weight=normal, style=normal)
  @font-face
    fileName = 'font/' + name
    font-family fontName ?= name
    font-weight: weight
    font-style: style
    src url(asset(fileName + '.woff2')) format("woff2"),
      url(asset(fileName + '.woff')) format("woff"),
      url(asset(fileName + '.ttf')) format("truetype")

bg(color, image=, position=, repeat=)
  if color == none
    background none
  else
    background-color color
    if image
      background-image url(asset('img/' + image))
    if position
      position = 50% 0 if position == top
      position = 50% 50% if position == middle
      position = 50% 100% if position == bottom
      background-position position
    if repeat
      repeat = no-repeat if repeat == no
      repeat = repeat-x if repeat == x
      repeat = repeat-y if repeat == y
      background-repeat repeat

transition()
  transitions = ''
  time = .2
  timingFunction = TIMING_FUNCTIONS['ease']
  time = shift(arguments) if arguments[0] is a 'unit'
  timingFunction = TIMING_FUNCTIONS[shift(arguments)] if TIMING_FUNCTIONS[arguments[0]]
  tempTime = null
  tempTimingFunction = null
  for attr in arguments
    attr = _alias(attr)
    if attr is a 'unit'
      tempTime = attr
    else if TIMING_FUNCTIONS[attr]
      tempTimingFunction = TIMING_FUNCTIONS[attr]
    else
      transitions = transitions + ', ' if transitions
      transitions = transitions + '%ss %s %s' % (
        (tempTime ? tempTime : time)\
        unquote(attr)\
        unquote(tempTimingFunction ? tempTimingFunction : timingFunction)
      )
      tempTime = null if tempTime
      tempTimingFunction = null if tempTimingFunction
  transition unquote(transitions)

overflow(type, clearfixParam=normal)
  if type == clearfix
    if clearfixParam == normal
      &:after
        content ''
        visibility hidden
        display block
        clear both
        height 0
    if clearfixParam == full
      display table
      *zoom 1
      &:after
        display block
        content '1 1 1 1 1 1 1 1 1 1 1' /*Op12+*/
        font-size 1px
        line-height 0
        word-spacing 99in
        overflow hidden
    if clearfixParam == lite
      overflow hidden
  else
    overflow type

modal(selector=modal, overlay=rgba(0,0,0,.8), margin=20px, z-index=5)
  #{selector}
    transition opacity
    implements vac
    position fixed 0 0 0 0
    overflow auto
    background-color overlay
    opacity 0
    z-index z-index
    &.shown
      opacity 1
      .modal-box
        scale 1

    .modal-box
      transition .3 easeOutBack transform
      implements vac-box
      weight 100px
      text-align center
      padding margin
      scale .8

    .{selector}
      text-align left
      margin 0 auto
      {block}
      
  /body.modal-locked
    overflow hidden